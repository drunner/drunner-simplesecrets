#!/bin/bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

function command_exists { command -v "$1" >/dev/null 2>&1 ; }
function setmd5 { MD5=$(md5sum "${1}") ; MD5="${MD5%% *}" ; }

if [ ! -e /config/s3 ]; then
  echo "Store requires simplesecrets to have been configured first. Please call configure."
  exit 1
fi
source /config/s3

function showusage {
cat <<EOF

NAME
   store - upload to simple secrets to S3
   
SYNOPSIS
   store < myfile 
   PASS=PASSWORD store NAME < myfile

DESCRIPTION
   Uploads the encrypted file (or data) to the configured S3 bucket in /simplesecrets.
   PASSWORD is as specified, or randomly generated otherwise.
   NAME is as specified, or the MD5 of the file otherwise.
   
   If NAME matches an existing file it is overwritten. This allows updating with the
   same NAME and PASSWORD, as well as updating the PASSWORD and keeping the name the
   same.

RETURN VALUE
   0   - success
   1   - error
   
EOF
   exit 1  
}

# putS3 is based on https://gist.github.com/chrismdp/6c6b6c825b07f680e710
# but with a little more consistency and leaving the ACL up to the bucket policy.

function putS3
{
  path=$1
  aws_path=$2
  date="$(LC_ALL=C date -u +"%a, %d %b %Y %X %z")"
  md5="$(openssl md5 -binary < "${path}" | base64)"
  content_type='application/x-compressed-tar'
  string="PUT\n\n${content_type}\n${date}\n/${BUCKET}${aws_path}"
  signature=$(echo -en "${string}" | openssl sha1 -hmac "${S3SECRET}" -binary | base64)
  curl -X PUT -T "${path}" \
    -H "Host: ${BUCKET}.s3.amazonaws.com" \
    -H "Date: ${date}" \
    -H "Content-Type: ${content_type}" \
    -H "Authorization: AWS ${S3KEY}:${signature}" \
    "https://${BUCKET}.s3.amazonaws.com${aws_path}"
    
  if [ $? -ne 0 ]; then
     echo "Upload failed!"
     exit 1
  fi
}

# dogpg INPUT PASSPHRASE
function dogpg { 
   gpg --yes --batch --passphrase="$2" -c "$1" > /dev/null 2>&1 ;
   if [ ! -e "${1}.gpg" ]; then
      echo "Encryption failed."
      exit 1
   fi
   }

#-------------------------------------------------------------------------------


if [ $# -gt 1 ]; then showusage; fi

COMMANDS=(gpg openssl md5sum)
for CMD in "${COMMANDS[@]}"; do
  if ! command_exists "${CMD}" ; then echo "${CMD} is required" ; exit 1 ; fi
done

# string is null test
if [ -z "${PASS}" ]; then 
   PASS=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)
fi
echo "Using Passphrase: ${PASS}"

BASEFILE="/tmp/toupload"
#echo "Reading file from stdin..."
cat > "$BASEFILE"
setmd5 "$BASEFILE"
echo "MD5=${MD5}"
NAME="${MD5}"
if [ ! -z "$1" ]; then NAME="$1" ; fi
echo "Using name: $NAME"
 
mkdir "/${HOME}/.gnupg" ; touch "/${HOME}/.gnupg/gpg.conf"

# Encrypt. 
dogpg "${BASEFILE}" "$PASS"
echo "${MD5}" > "${BASEFILE}.md5"

# output the encrypted data as well as the MD5Sum.
putS3 "${BASEFILE}.gpg" "/simplesecrets/${NAME}.gpg"
putS3 "${BASEFILE}.md5" "/simplesecrets/${NAME}.md5"

# confirm file is correct.
PASS="$PASS" /usr/local/bin/ssdownload "$BUCKET" "$NAME" > "${BASEFILE}new"
if [ $? -ne 0 ]; then 
    echo "Validation failed! Download/decryption failed."
    exit 1
fi

diff "${BASEFILE}new" "$BASEFILE" >/dev/null 2>&1
if [ $? -ne 0 ]; then 
   echo "Validation failed! Files differ."
   exit 1
fi

echo " "
echo "--------------------------------------------------------------------------------------"
echo "Succesfully uploaded and validated."
echo " "
echo "Download with:"
echo "   PASS=${PASS} ssdownload ${BUCKET} ${NAME} > myfile"
echo " "
echo "( you can get ssdownload at https://raw.github.com/j842/scripts/master/ssdownload )"
echo "--------------------------------------------------------------------------------------"
echo " "
