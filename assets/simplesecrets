#!/bin/bash
# PASS=password123 ; cat myfile | simplesecrets 

if [ ! -e /config/s3 ]; then
  echo "Must call simplesecrets-config first."
  exit 1
fi
. /config/s3

function showusage {
cat <<EOF

NAME
   simplesecrets - upload to simple secrets to S3
   
SYNOPSIS
   PASS=password123 simplesecrets < myfile

DESCRIPTION
   Uploads the file (or data) to the configured S3 bucket in /simplesecrets, encrypted with the given password.

RETURN VALUE
   0   - success
   1   - error
   3   - no change
   
EOF
   exit 1  
}

# based on https://gist.github.com/chrismdp/6c6b6c825b07f680e710

function putS3
{
  path=$1
  file=$2
  aws_path=$3
  bucket="${BUCKET}"
  date="$(LC_ALL=C date -u +"%a, %d %b %Y %X %z")"
  acl="x-amz-acl:public-read"
  content_type='application/x-compressed-tar'
  string="PUT\n\n$content_type\n$date\n/$bucket$aws_path$file"
  signature=$(echo -en "${string}" | openssl sha1 -hmac "${S3SECRET}" -binary | base64)
  curl -X PUT -T "$path/$file" \
    -H "Host: $bucket.s3.amazonaws.com" \
    -H "Date: $date" \
    -H "Content-Type: $content_type" \
    -H "Authorization: AWS ${S3KEY}:$signature" \
    "https://$bucket.s3.amazonaws.com$aws_path$file"
}

#-------------------------------------------------------------------------------



# string is null test
if [ -z "${PASS}" ]; then showusage ; fi

echo "Reading file from stdin..."
cat > /tmp/file
# use array assignment. Referring to just ${MD5} will return first element - the MD5 itself.
MD5=($(md5sum /tmp/file))

mkdir /root/.gnupg ; touch /root/.gnupg/gpg.conf
gpg --yes --batch --passphrase="${PASS}" -c /tmp/file

if [ ! -e /tmp/file.gpg ]; then
  echo "Unable to encrypt."
  exit 1
fi

mv /tmp/file.gpg /tmp/${MD5}

putS3 "/tmp" "${MD5}" "/simplesecrets/"

