#!/bin/bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

function command_exists { command -v "$1" >/dev/null 2>&1 ; }
function setmd5 { MD5=$(md5sum "${1}") ; MD5="${MD5%% *}" ; }

if [ ! -e /config/s3 ]; then
  echo "Must call simplesecrets-config first."
  exit 1
fi
. /config/s3

function showusage {
cat <<EOF

NAME
   simplesecrets - upload to simple secrets to S3
   
SYNOPSIS
   simplesecrets < myfile 
   PASS=password123 simplesecrets NAME < myfile

DESCRIPTION
   Uploads the file (or data) to the configured S3 bucket in /simplesecrets, encrypted with the given 
   password if provided or an automatically generated one otherwise.
   If NAME is specified, the file can be downloaded using that NAME. This allows updating files without
   modification of consumers.

RETURN VALUE
   0   - success
   1   - error
   3   - no change
   
EOF
   exit 1  
}

# based on https://gist.github.com/chrismdp/6c6b6c825b07f680e710

function putS3
{
  path=$1
  aws_path=$2
  date="$(LC_ALL=C date -u +"%a, %d %b %Y %X %z")"
  md5="$(openssl md5 -binary < "${path}" | base64)"
  content_type='application/x-compressed-tar'
  string="PUT\n\n${content_type}\n${date}\n/${BUCKET}${aws_path}"
  signature=$(echo -en "${string}" | openssl sha1 -hmac "${S3SECRET}" -binary | base64)
  curl -X PUT -T "${path}" \
    -H "Host: ${BUCKET}.s3.amazonaws.com" \
    -H "Date: ${date}" \
    -H "Content-Type: ${content_type}" \
    -H "Authorization: AWS ${S3KEY}:${signature}" \
    "https://${BUCKET}.s3.amazonaws.com${aws_path}"
    
  if [ $? -ne 0 ]; then
     echo "Upload failed!"
     exit 1
  fi
}

#     -H "Content-MD5: $md5" \

# dogpg INPUT PASSPHRASE
function dogpg { 
   gpg --yes --batch --passphrase="$2" -c "$1" > /dev/null 2>&1 ;
   if [ ! -e "${1}.gpg" ]; then
      echo "Encryption failed."
      exit 1
   fi
   }
# ungpg INPUT PASSPHRASE
function ungpg { 
   gpg --yes --batch --passphrase="$2" "$1" > /dev/null 2>&1 ;
   if [ ! -e "${1%.*}" ]; then
      echo "Decyption failed - no output ${1%.*}. Passphrase or hash likely incorrect."
      exit 1
   fi
   }

#-------------------------------------------------------------------------------


if [ $# -gt 1 ]; then showusage; fi

COMMANDS=(gpg openssl md5sum)
for CMD in "${COMMANDS[@]}"; do
  if ! command_exists "${CMD}" ; then echo "${CMD} is required" ; exit 1 ; fi
done

# string is null test
if [ -z "${PASS}" ]; then 
   PASS=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)
   echo "Generated passphrase: ${PASS}"
fi

BASEFILE="/tmp/secretfiletoupload"
echo "Reading file from stdin..."
cat > "$BASEFILE"
setmd5 "$BASEFILE"
echo "MD5=${MD5}"
NAME="${MD5}"
if [ ! -z "$1" ]; then NAME="$1" ; echo "Using filename $NAME" ; fi

mkdir /root/.gnupg ; touch /root/.gnupg/gpg.conf

# Encrypt. We use both the file's MD5 and the passphrase. Arguably no better than just passphrase,
# but may be useful in the case of named files with weak passphrases (an attacker may not know the MD5
# of the original uploaded file - it's not stored in S3 in this case).
dogpg "$BASEFILE" "${MD5}"
dogpg "${BASEFILE}.gpg" "$PASS"

putS3 "${BASEFILE}.gpg.gpg" "/simplesecrets/${NAME}"

# confirm file is correct.
#echo "PASS=${PASS} /usr/local/bin/ssdownload ${BUCKET} ${MD5} ${NAME}"
if [ "$NAME" != "$MD5" ]; then
   PASS="$PASS" /usr/local/bin/ssdownload "$BUCKET" "${MD5}" "$NAME" > "${BASEFILE}new"
else
   PASS="$PASS" /usr/local/bin/ssdownload "$BUCKET" "${MD5}" > "${BASEFILE}new"
fi

if [ $? -ne 0 ]; then 
    echo "Validation failed! Download/decryption failed."
    exit 1
fi

diff "${BASEFILE}new" "$BASEFILE" >/dev/null 2>&1
if [ $? -ne 0 ]; then 
   echo "Validation failed! Files differ."
   exit 1
fi


echo " "
echo "--------------------------------------------------------------------------------------"
echo "Succesfully uploaded and validated."
echo " "
echo "Download with:"
if [ "$NAME" != "$MD5" ]; then
echo "   PASS=${PASS} ssdownload ${BUCKET} ${MD5} ${NAME} > myfile"
else
echo "   PASS=${PASS} ssdownload ${BUCKET} ${MD5} > myfile"
fi
echo " "
echo "( you can get ssdownload at https://raw.github.com/j842/scripts/master/ssdownload )"
echo "--------------------------------------------------------------------------------------"
echo " "
