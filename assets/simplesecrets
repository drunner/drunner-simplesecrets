#!/bin/bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

function command_exists { command -v "$1" >/dev/null 2>&1 ; }
function setmd5 { MD5=$(md5sum "${1}") ; MD5="${MD5%% *}" ; }

if [ ! -e /config/s3 ]; then
  echo "Must call simplesecrets-config first."
  exit 1
fi
. /config/s3

function showusage {
cat <<EOF

NAME
   simplesecrets - upload to simple secrets to S3
   
SYNOPSIS
   PASS=password123 simplesecrets [NAME] < myfile

DESCRIPTION
   Uploads the file (or data) to the configured S3 bucket in /simplesecrets, encrypted with the given password.
   If NAME is specified, the file can be downloaded using that NAME. This allows updating files without
   modification of consumers.

RETURN VALUE
   0   - success
   1   - error
   3   - no change
   
EOF
   exit 1  
}

# based on https://gist.github.com/chrismdp/6c6b6c825b07f680e710

function putS3
{
  path=$1
  file=$2
  aws_path=$3
  bucket="${BUCKET}"
  date="$(LC_ALL=C date -u +"%a, %d %b %Y %X %z")"
  md5="$(openssl md5 -binary < "$path/$file" | base64)"
  content_type='application/x-compressed-tar'
  string="PUT\n\n${content_type}\n${date}\n/${bucket}${aws_path}${file}"
  signature=$(echo -en "${string}" | openssl sha1 -hmac "${S3SECRET}" -binary | base64)
  curl -X PUT -T "${path}/${file}" \
    -H "Host: ${bucket}.s3.amazonaws.com" \
    -H "Date: ${date}" \
    -H "Content-Type: ${content_type}" \
    -H "Authorization: AWS ${S3KEY}:${signature}" \
    "https://${bucket}.s3.amazonaws.com${aws_path}${file}"
    
  if [ $? -ne 0 ]; then
     echo "Upload failed!"
     exit 1
  fi
}

#     -H "Content-MD5: $md5" \

# dogpg INPUT OUTPUT PASSPHRASE
function dogpg { 
   gpg --yes --batch --passphrase="$3" --output="$2" -c "$1" > /dev/null 2>&1 ;
   if [ ! -e "$2" ]; then
      echo "Encryption failed."
      exit 1
   fi
   }


#-------------------------------------------------------------------------------



# string is null test
if [ -z "${PASS}" ]; then showusage ; fi
if [ $# -gt 1 ]; then showusage; fi

COMMANDS=(gpg openssl md5sum)
for CMD in "${COMMANDS[@]}"; do
  if ! command_exists "${CMD}" ; then echo "${CMD} is required" ; exit 1 ; fi
done

BASEFILE="/tmp/secretfiletoupload"
echo "Reading file from stdin..."
cat > "$BASEFILE"
setmd5 "$BASEFILE"
echo "MD5=${MD5}"
NAME="${MD5}"
if [ ! -z "$1" ]; then NAME="$1" ; echo "Using filename $NAME" ; fi

mkdir /root/.gnupg ; touch /root/.gnupg/gpg.conf
dogpg "$BASEFILE" "${BASEFILE}.gpg" "${MD5}"
dogpg "${BASEFILE}.gpg" "${BASEFILE}.gpg.gpg" "$PASS"

mv "${BASEFILE}.gpg.gpg" "/tmp/${NAME}"

putS3 "/tmp" "${NAME}" "/simplesecrets/"

# confirm file is correct.
echo "PASS=${PASS} /usr/local/bin/ssdownload ${BUCKET} ${MD5} ${NAME}"
PASS="${PASS}" /usr/local/bin/ssdownload "${BUCKET}" "${MD5}" "${NAME}" > "$BASEFILE.new"
if [ $? -ne 0 ]; then 
   echo "Validation failed! Download/decryption failed."
   exit 1
fi
diff "$BASEFILE.new" "$BASEFILE" >/dev/null 2>&1
if [ $? -ne 0 ]; then 
   echo "Validation failed! Files differ."
   exit 1
fi


echo " "
echo "Download with:"
echo "   PASS=${PASS} ssdownload ${BUCKET} ${MD5} ${NAME} > myfile"
